<h1><strong>有關本網站</strong></h1>
<h2>CMSiMDE</h2>
<p><a href="https://github.com/mdecourse/cmsimde.git">https://github.com/mdecourse/cmsimde.git</a><span> </span>是一套利用 Python 解譯程式語言所編寫的網際內容管理系統, 使用者可以用來建立動態網站, 靜態網站, 網誌與網際簡報系統.</p>
<p>程式語言就其執行的方式, 可以分為編譯式與解譯式等兩種.</p>
<p>編譯式語言例如: C 程式語言</p>
<p>解譯式語言例如: Python 程式語言</p>
<p>編寫程式語言是工程師與電腦溝通的途徑之一, 工程師編寫計算機程式在電腦上執行, 可以透過電腦強大與重複的運算能力來解決問題.</p>
<p>CMSiMDE 就是工程師希望將各種與產品開發的過程資料, 存放在網站上, 除了可用於工程師之間的溝通外, 還能夠將產品開發的細節, 或者特定工具的使用詳細記錄, 以作為往後的參考.</p>
<h4>如何使用 CMSiMDE</h4>
<p>(1) 以子模組的方式使用 CMSiMDE</p>
<p>將 Github 倉儲 git clone 到近端工作區之後, 可以利用 git submodule add 指令將遠端倉儲中的 CMSiMDE 程式碼納為倉儲中的 cmsimde 子目錄, 並且保持與遠端原始碼的版次關聯 (也就是能夠指定採用遠端特定版本的 CMSiMDE 程式碼).</p>
<p>好處: 子模組可以與遠端官方的倉儲保持關聯, 一旦 CMSiMDE 更新版本, 使用者可以利用 git pull 直接拉下遠端 CMSiMDE 的最新程式碼.</p>
<p>壞處: 使用者若要 git clone 遠端的倉儲至近端, 需要加上 --recurse-submodules 選項</p>
<p>(2) 不以子模組的方式使用 CMSiMDE</p>
<p>假如不需要保持與遠端 CMSiMDE 倉儲特定版次的關聯性, 可以直接將 CMSiMDE 倉儲中的檔案, 直接放入 cmsimde 目錄, 並將其中 up_dir 的內容複製到希望建立網頁的倉儲主目錄中即可.</p>
<p>好處: 使用者可以直接使用 git clone 指令, 拉下遠端倉儲的所有資料.</p>
<p>壞處: 失去與遠端 CMSiMDE 倉儲的關聯, 假如要使用最新改版後的 CMSiMDE 原始碼, 必須另外 git clone 然後再取代倉儲中 cmsimde 的所有檔案.</p>
<p></p>
<h1>W15</h1>
<p style="text-align: left;">1 super computer 超級電腦<br/>2 mainframe 伺服器主機<br/>3 server 伺服器 (虛擬 實體)<br/>4 pc=person computer 個人電腦<br/>5 microcontroller 微控制器<br/>6 mobile phone 手機<br/><br/>Port 埠號 <br/>DHCP動態網路位置</p>
<h1>W2</h1>
<ul>
<li>IPv4 version 4 IP        四個區段,用.隔開</li>
<li><span>IPv6 version 6 IP        八個區段,用:隔開</span></li>
</ul>
<ol>
<li style="text-align: left;">[2001:288:6004:17::53]:3128                 140.130.17.53:3128</li>
<li style="text-align: left;"><span>[2001:288:6004:17::42]:3128                 140.130.17.53:254(系gateway通道)</span></li>
<li style="text-align: left;"><span>[2001:288:6004:17::17]:3128                 140.130.1.*(校主幹</span><span>)</span></li>
<li style="text-align: left;"><span>[2001:288:6004:17::7]:3128</span><span></span></li>
</ol>
<p><span>tcp/ip==trandmision control protocol/internet protocol</span></p>
<p style="text-align: left;"><span>inter-net==inter-national(國際)</span></p>
<p><span>(網際,inter+networt)</span></p>
<ul>
<li>protocal            協定</li>
<li>trasmit              傳輸</li>
<li style="text-align: left;"><span>data                  資料</span></li>
<li style="text-align: left;"><span>control              控制</span></li>
<li style="text-align: left;"><span>version             版本(短時間)</span></li>
<li style="text-align: left;"><span>edition              版本(長時間)</span></li>
<li style="text-align: left;"><span>router               路由器</span></li>
<li style="text-align: left;"><span>route                路徑</span></li>
<li style="text-align: left;"><span>packet              封包</span></li>
<li style="text-align: left;"><span>remote login    遠端登入</span></li>
<li style="text-align: left;"><span>micro               微     </span></li>
<li style="text-align: left;"><span>microscope     顯微鏡  </span></li>
<li style="text-align: left;"><span>telescope        望遠鏡</span></li>
<li style="text-align: left;"><span>macro             巨(比原子(atom)大)       </span></li>
<li style="text-align: left;"><span>atomic bomb  原子彈</span><span></span><span></span><span>中華電信   dns. server.    dns==domain name server 符號名稱伺服器</span></li>
</ul>
<div class="gs">
<div class="">
<div class="ii gt" id=":kv">
<div class="a3s aXjCH" id=":kw">
<div dir="ltr">
<h1>W6</h1>
<p>portable obs</p>
<p>google hangout meet</p>
<p>streeming and recording</p>
<h4>讓手機可以利用電腦熱點上網：</h4>
<p>採用 <a href="https://www.tp-link.com/us/home-networking/usb-adapter/tl-wn725n/">https://www.tp-link.com/us/home-networking/usb-adapter/tl-wn725n/</a></p>
<p>將此一 USB Wifi adapter 連接電腦後, 若網路為 IPv4 協定時, 可以透過"設定 -&gt; 網路和網際網路 -&gt; 行動熱點", 選擇開啟並編輯"網路名稱與網路密碼"後, 讓至多 8 台手機透過熱點連線上網。</p>
<p>但是因為目前 Windows 10 並<a href="https://answers.microsoft.com/en-us/windows/forum/all/support-ipv6-in-mobile-hotspot-network-sharing/8801ea57-c6dc-4c10-afe6-192879a85835">未提供 IPv6 網路協定下的網路熱點功能</a>, 因此在純 IPv6 網路協定下無法使用"行動熱點"服務。</p>
<hr/>
<p>利用手機鏡頭當作 webcam:</p>
<p>Android:<span> </span><a href="https://www.digitalcitizen.life/turn-android-smartphone-webcam-windows">https://www.digitalcitizen.life/turn-android-smartphone-webcam-windows</a> <br/>iPhone:<span> </span><a href="https://www.makeuseof.com/tag/use-your-iphone-as-a-webcam-heres-how-ios/">https://www.makeuseof.com/tag/use-your-iphone-as-a-webcam-heres-how-ios/</a> </p>
<hr/>
<h4>需要 clone 個人倉儲時：</h4>
<p>git clone --recurse-submodules 倉儲_url.git</p>
<p>例如: git clone --recurse-submodules<span> </span><a href="https://github.com/mdecourse/wcmj2020.git">https://github.com/mdecourse/wcmj2020.git</a></p>
<h4>現場直播的 audio 錄音設定</h4>
<p>在電腦輔助設計室進行直播時, 由於現場有擴音設備, 因此採用 OBS 串流至 Youtube 的最佳收音並非從 Webcam 的麥克風, 而是從擴音器以 audio outpu 連接到電腦的麥克風插槽, 然後將 OBS 的 audio 設定為從電腦的麥克風收音.</p>
<h1>W7</h1>
<p>grouping and meet.</p>
</div>
</div>
</div>
</div>
</div>
<p></p>
<h1>W8</h1>
<p><br/><span>meeting     </span><a data-saferedirecturl="https://www.google.com/url?q=https://meet.google.com/zen-ewrh-zfy&amp;source=gmail&amp;ust=1587803773379000&amp;usg=AFQjCNFyVia7prGDZGCUcDjFKUsLC3oe7A" href="https://meet.google.com/zen-ewrh-zfy" target="_blank">https://meet.google.com/zen-<wbr/>ewrh-zfy</a><span> 第三組<span> </span></span><br/><span>2001:288:6004:17::53</span><br/><span>2001:288:6004:17::42<br/></span><span>2001:288:6004:17::17<br/>2001:288:6004:17::4 "虛擬主機 不耐操 可以校外連接"</span> <br/>可能線上上課<br/>組員:<span> </span><span>50833104 組長<br/></span><span></span><span>50833106</span><span> <br/></span><span>50833113</span><span> <br/></span><span>50833114</span><span> <br/></span><span>50833116</span><span> <br/></span><span>50833118</span><span> <br/></span><span>50833120</span><span> <br/></span><span>50833125</span><span> <br/></span><span>50833140<br/></span><span></span><span>50833141 <span>group 3</span></span></p>
<h1><span><span>w9</span></span></h1>
<h2>電腦軟硬體簡介：</h2>
<h3><span>電腦硬體設備介紹：</span></h3>
<ul>
<li>主機板：主機板的功能主要在承戴其插卡，所有電腦裡的東西都會接到主機板 ，它們之間要相互的傳資料也是經過主機板，之後再傳到對方，簡單的來說，它就像一個轉運站一樣。</li>
<li>顯示卡<span>(VGA)</span>：顯示卡在電腦中主要作用就是程式運行時根據<span>CPU</span>提共的指令和有關數據，轉換成顯示器能夠接受的文字和圖形顯示信號後通過螢幕顯示出來，簡單來說，就是把電腦計算出來的文字與圖形表現在顯示器上。</li>
<li>中央處理器<span>(CPU)</span>：又稱為電腦的心臟，而<span>CPU</span>主要工作是算術、運輯運算，解讀電腦內的每個指令來控制電腦的運作。</li>
<li>記憶體<span>(RAM)</span>：記憶體的主要功用是暫存資料，當它被使用時，系統可以從<span>RAM</span>上存取資料，而且需要電力來維持它的記憶，所以記憶體可以說是電腦系統中最佳倉儲管理員。</li>
</ul>
<h3>電腦軟體設備介紹：</h3>
<p>則是看不到或觸摸不到的程式，由許多特殊安排的指令組織而成，分為兩種：</p>
<ol>
<li>系統軟體：作業系統，語言編譯器及公用程式，尚有<span>DOS</span>、<span>Windows95/98/2000/Me</span>、<span>Unix</span>、<span>...</span>等等。</li>
<li>應用軟體：如<span>Word</span>文書處裡、<span>ExceI</span>電子式算表、<span>PowerPoint</span>簡報軟體、<span>Photoshop</span>影像處理、<span>Flash</span>像量動畫、遊戲軟體<span>.....</span>等。</li>
</ol>
<p><span><span></span></span></p>
<h2><span><span>網路架構與設定簡介：</span></span></h2>
<p><br/><strong>win10</strong><strong>電腦網路設定說明：</strong></p>
<p><strong>步驟1</strong> 同時按【WIN鍵+X鍵】→選擇【控制台】。</p>
<p><strong>步驟2</strong> 點選【<strong>網路</strong>和網際<strong>網路</strong>】。</p>
<p><strong>步驟3</strong> 選擇【<strong>網路</strong>和共用中心】。</p>
<p><strong>步驟4</strong> 選擇【設定新的連線或<strong>網路</strong>】。</p>
<p><strong>步驟5</strong> 連線完成後即可上網。</p>
<p><strong>步驟6</strong> 選擇【關閉】完成設定動作。</p>
<p><strong>步驟7</strong> 之後若要連線，請點選【寬頻連線】即可上網。</p>
<h3>網際網路：</h3>
<p>網際網路是指<a href="https://zh.wikipedia.org/wiki/20%E4%B8%96%E7%B4%80">20世紀</a>末期興起<a href="https://zh.wikipedia.org/wiki/%E7%94%B5%E8%84%91%E7%BD%91%E7%BB%9C">電腦網路</a>與電腦網路之間所串連成的龐大<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF">網路</a>系統。這些網路以一些標準的<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE">網路協定</a>相連。它是由從地方到全球範圍內幾百萬個私人、<a href="https://zh.wikipedia.org/wiki/%E5%AD%B8%E8%A1%93%E7%95%8C">學術界</a>、企業和政府的網路所構成，透過<a href="https://zh.wikipedia.org/wiki/%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF">電子</a>，<a href="https://zh.wikipedia.org/wiki/%E7%84%A1%E7%B7%9A">無線</a>和<a href="https://zh.wikipedia.org/wiki/%E5%85%89%E7%BA%96%E7%B6%B2%E8%B7%AF">光纖網路技術</a>等等一系列廣泛的技術聯繫在一起。網際網路承載範圍廣泛的資訊資源和服務，例如相互關聯的<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC">超文字</a>檔案，還有<a href="https://zh.wikipedia.org/wiki/%E8%90%AC%E7%B6%AD%E7%B6%B2">全球資訊網</a>（WWW）的應用，<a href="https://zh.wikipedia.org/wiki/%E9%9B%BB%E5%AD%90%E9%83%B5%E4%BB%B6">電子郵件</a>，<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E9%9A%9B%E5%8D%94%E8%AD%B0%E9%80%9A%E8%A9%B1%E6%8A%80%E8%A1%93">通話</a>，以及<a href="https://zh.wikipedia.org/wiki/%E6%AA%94%E6%A1%88%E5%88%86%E4%BA%AB">檔案分享</a>服務。</p>
<p>網際網路的起源可以追溯到1960年代<a href="https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%9C%8B%E8%81%AF%E9%82%A6%E6%94%BF%E5%BA%9C">美國聯邦政府</a>委託進行的一項研究，目的是建立容錯與電腦網路的通信。網際網路的前身<a href="https://zh.wikipedia.org/wiki/ARPANET">ARPANET</a>最初在1980年代作為區域學術和軍事網路連接的骨幹。1980年代，<span data-foreign-title="NSFNET" data-lang-code="en" data-lang-name="英語" data-orig-title="NSFNET"><a href="https://zh.wikipedia.org/w/index.php?title=NSFNET&amp;action=edit&amp;redlink=1">NSFNET</a></span>成為新的骨幹而得到資助，以及其他商業化擴展得到了私人資助，導致了全世界網路技術的發展，以及許多網路的合併。到1990年代初，商業網路和企業之間的連接標誌著向現代網際網路的過渡。儘管網際網路在1980年代被學術界廣泛使用 ， 但商業化的服務和技術融入了現代每個人的生活 。</p>
<h1>W10</h1>
<p>Public key 公開密要加密</p>
<p>Cryptography 編碼學</p>
<p>SSH 安全編碼機制</p>
<p>Putty：FREE SSH FOR WINDOW</p>
<p>FREE SSH FOR WINDOW</p>
<p>設置：移動滑鼠</p>
<p></p>
<p></p>
<p>Private key</p>
<h1>W12-W13</h1>
<h4>W12</h4>
<p><a href="https://drive.google.com/open?id=1d_YpSrTdKLPKZjkHW2TNsbHRU1ePNRFl">Leo Editor 與 Pelican blog 使用說明影片</a></p>
<h4>W13</h4>
<p>Pelican Blog 內容與 Google Blogger 同步</p>
<p><a href="https://drive.google.com/open?id=1vpNOyew4ts78nuJ50-CiE26WSk0YxOV7">W13  利用 Leo Editor 按鈕處理同步說明影片</a></p>
<p><a href="https://drive.google.com/open?id=1I5fLwnRSeDPaSdXkrartxERICHKgmD20">教學影片-2</a></p>
<p><a href="https://drive.google.com/open?id=1hqD5j0H37OWb2k4PQAcQ5aFPAzJrnBQB">教學影片-3</a></p>
<p>利用 Windows 10 設定 -&gt; 選擇預設網頁瀏覽器, 使用 Google Chrome 作為預設瀏覽器.</p>
<p>隨身程式系統必須安裝 <span>google-api-python-client 與 oauth2client</span><br/><br/>pip install google-api-python-client oauth2client<br/><br/>OAuth 2.0 client IDs 程式類別可以選擇 Desktop app<br/><br/>使用者完成 client_secrets.json 設定後, 必須將檔案存在倉儲目錄外部</p>
<p>將 client_secrets.json 轉為 credential_token.dat 的程式:</p>
<div>
<div class="syntaxhighlighter py" id="highlighter_784718">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter" style="width: 32px;">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
</td>
<td class="code" style="width: 632px;">
<div class="container">
<div class="line number1 index0 alt2"><code class="py decorator">@language</code> <code class="py plain">python</code></div>
<div class="line number2 index1 alt1"><code class="py comments"># https://developers.google.com/blogger/docs/3.0/using</code></div>
<div class="line number3 index2 alt2"><code class="py comments"># under Mac command + b to execute</code></div>
<div class="line number4 index3 alt1"><code class="py keyword">import</code> <code class="py plain">pickle</code></div>
<div class="line number5 index4 alt2"><code class="py keyword">import</code> <code class="py plain">os</code></div>
<div class="line number6 index5 alt1"><code class="py keyword">from</code> <code class="py plain">googleapiclient.discovery </code><code class="py keyword">import</code> <code class="py plain">build</code></div>
<div class="line number7 index6 alt2"><code class="py keyword">from</code> <code class="py plain">google_auth_oauthlib.flow </code><code class="py keyword">import</code> <code class="py plain">InstalledAppFlow</code></div>
<div class="line number8 index7 alt1"> </div>
<div class="line number9 index8 alt2"> </div>
<div class="line number10 index9 alt1"><code class="py plain">SCOPES </code><code class="py keyword">=</code> <code class="py plain">[</code><code class="py string">'https://www.googleapis.com/auth/blogger'</code><code class="py plain">, ]</code></div>
<div class="line number11 index10 alt2"> </div>
<div class="line number12 index11 alt1"><code class="py comments"># we check if the file tBo store the credentials exists</code></div>
<div class="line number13 index12 alt2"><code class="py keyword">if</code> <code class="py keyword">not</code> <code class="py plain">os.path.exists(</code><code class="py string">'./../../yen_gm_blogger_token.dat'</code><code class="py plain">):</code></div>
<div class="line number14 index13 alt1"> </div>
<div class="line number15 index14 alt2"><code class="py spaces">    </code><code class="py plain">flow </code><code class="py keyword">=</code> <code class="py plain">InstalledAppFlow.from_client_secrets_file(</code><code class="py string">'./../../yen_gm_blogger_secrets.json'</code><code class="py plain">, SCOPES)</code></div>
<div class="line number16 index15 alt1"><code class="py spaces">    </code><code class="py plain">credentials </code><code class="py keyword">=</code> <code class="py plain">flow.run_local_server()</code></div>
<div class="line number17 index16 alt2"> </div>
<div class="line number18 index17 alt1"><code class="py spaces">    </code><code class="py plain">with </code><code class="py functions">open</code><code class="py plain">(</code><code class="py string">'./../../yen_gm_blogger_token.dat'</code><code class="py plain">, </code><code class="py string">'wb'</code><code class="py plain">) as credentials_dat:</code></div>
<div class="line number19 index18 alt2"><code class="py spaces">        </code><code class="py plain">pickle.dump(credentials, credentials_dat)</code></div>
<div class="line number20 index19 alt1"><code class="py keyword">else</code><code class="py plain">:</code></div>
<div class="line number21 index20 alt2"><code class="py spaces">    </code><code class="py plain">with </code><code class="py functions">open</code><code class="py plain">(</code><code class="py string">'./../../yen_gm_blogger_token.dat'</code><code class="py plain">, </code><code class="py string">'rb'</code><code class="py plain">) as credentials_dat:</code></div>
<div class="line number22 index21 alt1"><code class="py spaces">        </code><code class="py plain">credentials </code><code class="py keyword">=</code> <code class="py plain">pickle.load(credentials_dat)</code></div>
<div class="line number23 index22 alt2"><code class="py plain">service </code><code class="py keyword">=</code> <code class="py plain">build(</code><code class="py string">'blogger'</code><code class="py plain">, </code><code class="py string">'v3'</code><code class="py plain">, credentials</code><code class="py keyword">=</code><code class="py plain">credentials)</code></div>
<div class="line number24 index23 alt1"><code class="py plain">g.es(service)</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>add_to_blogger 按鈕內容:</p>
<div>
<div class="syntaxhighlighter py" id="highlighter_122459">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
<div class="line number31 index30 alt2">31</div>
<div class="line number32 index31 alt1">32</div>
<div class="line number33 index32 alt2">33</div>
<div class="line number34 index33 alt1">34</div>
<div class="line number35 index34 alt2">35</div>
<div class="line number36 index35 alt1">36</div>
<div class="line number37 index36 alt2">37</div>
<div class="line number38 index37 alt1">38</div>
<div class="line number39 index38 alt2">39</div>
<div class="line number40 index39 alt1">40</div>
<div class="line number41 index40 alt2">41</div>
<div class="line number42 index41 alt1">42</div>
<div class="line number43 index42 alt2">43</div>
<div class="line number44 index43 alt1">44</div>
<div class="line number45 index44 alt2">45</div>
<div class="line number46 index45 alt1">46</div>
<div class="line number47 index46 alt2">47</div>
<div class="line number48 index47 alt1">48</div>
<div class="line number49 index48 alt2">49</div>
<div class="line number50 index49 alt1">50</div>
<div class="line number51 index50 alt2">51</div>
<div class="line number52 index51 alt1">52</div>
<div class="line number53 index52 alt2">53</div>
<div class="line number54 index53 alt1">54</div>
<div class="line number55 index54 alt2">55</div>
<div class="line number56 index55 alt1">56</div>
<div class="line number57 index56 alt2">57</div>
<div class="line number58 index57 alt1">58</div>
<div class="line number59 index58 alt2">59</div>
<div class="line number60 index59 alt1">60</div>
<div class="line number61 index60 alt2">61</div>
<div class="line number62 index61 alt1">62</div>
<div class="line number63 index62 alt2">63</div>
<div class="line number64 index63 alt1">64</div>
<div class="line number65 index64 alt2">65</div>
<div class="line number66 index65 alt1">66</div>
<div class="line number67 index66 alt2">67</div>
<div class="line number68 index67 alt1">68</div>
<div class="line number69 index68 alt2">69</div>
<div class="line number70 index69 alt1">70</div>
<div class="line number71 index70 alt2">71</div>
<div class="line number72 index71 alt1">72</div>
<div class="line number73 index72 alt2">73</div>
<div class="line number74 index73 alt1">74</div>
<div class="line number75 index74 alt2">75</div>
<div class="line number76 index75 alt1">76</div>
<div class="line number77 index76 alt2">77</div>
<div class="line number78 index77 alt1">78</div>
<div class="line number79 index78 alt2">79</div>
<div class="line number80 index79 alt1">80</div>
<div class="line number81 index80 alt2">81</div>
<div class="line number82 index81 alt1">82</div>
<div class="line number83 index82 alt2">83</div>
<div class="line number84 index83 alt1">84</div>
<div class="line number85 index84 alt2">85</div>
<div class="line number86 index85 alt1">86</div>
<div class="line number87 index86 alt2">87</div>
<div class="line number88 index87 alt1">88</div>
<div class="line number89 index88 alt2">89</div>
<div class="line number90 index89 alt1">90</div>
<div class="line number91 index90 alt2">91</div>
<div class="line number92 index91 alt1">92</div>
<div class="line number93 index92 alt2">93</div>
<div class="line number94 index93 alt1">94</div>
<div class="line number95 index94 alt2">95</div>
<div class="line number96 index95 alt1">96</div>
<div class="line number97 index96 alt2">97</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py decorator">@language</code> <code class="py plain">python</code></div>
<div class="line number2 index1 alt1"><code class="py keyword">from</code> <code class="py plain">markdown </code><code class="py keyword">import</code> <code class="py plain">markdown</code></div>
<div class="line number3 index2 alt2"><code class="py keyword">from</code> <code class="py plain">oauth2client </code><code class="py keyword">import</code> <code class="py plain">client</code></div>
<div class="line number4 index3 alt1"><code class="py comments">#from googleapiclient import sample_tools</code></div>
<div class="line number5 index4 alt2"><code class="py keyword">import</code> <code class="py plain">os</code></div>
<div class="line number6 index5 alt1"><code class="py comments"># 配合使用 credential token</code></div>
<div class="line number7 index6 alt2"><code class="py keyword">import</code> <code class="py plain">pickle</code></div>
<div class="line number8 index7 alt1"><code class="py keyword">from</code> <code class="py plain">googleapiclient.discovery </code><code class="py keyword">import</code> <code class="py plain">build</code></div>
<div class="line number9 index8 alt2"><code class="py comments">#from google_auth_oauthlib.flow import InstalledAppFlow</code></div>
<div class="line number10 index9 alt1"><code class="py comments">#from google.auth.transport.requests import Request</code></div>
<div class="line number11 index10 alt2"> </div>
<div class="line number12 index11 alt1"><code class="py plain">os.environ[</code><code class="py string">'TZ'</code><code class="py plain">] </code><code class="py keyword">=</code> <code class="py string">'Asia/Taipei'</code></div>
<div class="line number13 index12 alt2"><code class="py plain">with </code><code class="py functions">open</code><code class="py plain">(</code><code class="py string">'./../../blogger_credentials.dat'</code><code class="py plain">, </code><code class="py string">'rb'</code><code class="py plain">) as credentials_dat:</code></div>
<div class="line number14 index13 alt1"><code class="py spaces">    </code><code class="py plain">credentials </code><code class="py keyword">=</code> <code class="py plain">pickle.load(credentials_dat)</code></div>
<div class="line number15 index14 alt2"><code class="py plain">service </code><code class="py keyword">=</code> <code class="py plain">build(</code><code class="py string">'blogger'</code><code class="py plain">, </code><code class="py string">'v3'</code><code class="py plain">, credentials</code><code class="py keyword">=</code><code class="py plain">credentials)</code></div>
<div class="line number16 index15 alt1"> </div>
<div class="line number17 index16 alt2"><code class="py keyword">def</code> <code class="py plain">get_cat_tag_content(data):</code></div>
<div class="line number18 index17 alt1"><code class="py spaces">    </code><code class="py comments"># 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---</code></div>
<div class="line number19 index18 alt2"><code class="py spaces">    </code><code class="py comments"># 用跳行符號分割</code></div>
<div class="line number20 index19 alt1"><code class="py spaces">    </code><code class="py plain">data_list </code><code class="py keyword">=</code> <code class="py plain">data.split(</code><code class="py string">"\n"</code><code class="py plain">)</code></div>
<div class="line number21 index20 alt2"><code class="py spaces">    </code><code class="py comments">#第 2 行為 title</code></div>
<div class="line number22 index21 alt1"><code class="py spaces">    </code><code class="py plain">title</code><code class="py keyword">=</code> <code class="py plain">data_list[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number23 index22 alt2"><code class="py spaces">    </code><code class="py comments">#第 4 行為 category</code></div>
<div class="line number24 index23 alt1"><code class="py spaces">    </code><code class="py plain">category </code><code class="py keyword">=</code> <code class="py plain">data_list[</code><code class="py value">3</code><code class="py plain">]</code></div>
<div class="line number25 index24 alt2"><code class="py spaces">    </code><code class="py comments">#第 5 行為 tags</code></div>
<div class="line number26 index25 alt1"><code class="py spaces">    </code><code class="py plain">tags </code><code class="py keyword">=</code> <code class="py plain">data_list[</code><code class="py value">4</code><code class="py plain">]</code></div>
<div class="line number27 index26 alt2"><code class="py spaces">    </code><code class="py comments"># 有多項資料的 content 型別為數列</code></div>
<div class="line number28 index27 alt1"><code class="py spaces">    </code><code class="py comments"># 再將第 9 行之後的資料數列串回成以跳行隔開的資料</code></div>
<div class="line number29 index28 alt2"><code class="py spaces">    </code><code class="py plain">content </code><code class="py keyword">=</code> <code class="py string">"\n"</code><code class="py plain">.join(data_list[</code><code class="py value">8</code><code class="py plain">:])</code></div>
<div class="line number30 index29 alt1"><code class="py spaces">    </code><code class="py comments"># 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;</code></div>
<div class="line number31 index30 alt2"><code class="py spaces">    </code><code class="py plain">content </code><code class="py keyword">=</code> <code class="py plain">content.replace(</code><code class="py string">'&lt;!-- PELICAN_END_SUMMARY --&gt;'</code><code class="py plain">, </code><code class="py string">'&lt;!--more--&gt;'</code><code class="py plain">)</code></div>
<div class="line number32 index31 alt1"><code class="py spaces">    </code><code class="py comments"># 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式</code></div>
<div class="line number33 index32 alt2"><code class="py spaces">    </code><code class="py comments">#content = content.replace('~~~python', '[code lang="python"]')</code></div>
<div class="line number34 index33 alt1"><code class="py spaces">    </code><code class="py comments">#content = content.replace('~~~', '[/code]')</code></div>
<div class="line number35 index34 alt2"><code class="py spaces">    </code><code class="py keyword">return</code> <code class="py plain">title, category, tags, content</code></div>
<div class="line number36 index35 alt1"> </div>
<div class="line number37 index36 alt2"><code class="py comments"># 從目前所在節點的 body pan 中取出類別, tags 以及文章內容</code></div>
<div class="line number38 index37 alt1"><code class="py comments"># p.h 為 @clean filename.md</code></div>
<div class="line number39 index38 alt2"><code class="py comments"># 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案</code></div>
<div class="line number40 index39 alt1"><code class="py plain">md_filename </code><code class="py keyword">=</code> <code class="py plain">p.h.split(</code><code class="py string">" "</code><code class="py plain">)[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number41 index40 alt2"><code class="py plain">with </code><code class="py functions">open</code><code class="py plain">(md_filename, </code><code class="py string">'r'</code><code class="py plain">, encoding</code><code class="py keyword">=</code><code class="py string">"utf-8"</code><code class="py plain">) as content_file:</code></div>
<div class="line number42 index41 alt1"><code class="py spaces">    </code><code class="py plain">md_content </code><code class="py keyword">=</code> <code class="py plain">content_file.read()</code></div>
<div class="line number43 index42 alt2"><code class="py comments"># title_str, category_str, tags_str, content = get_cat_tag_content(p.b)</code></div>
<div class="line number44 index43 alt1"><code class="py plain">title_str, category_str, tags_str, content </code><code class="py keyword">=</code> <code class="py plain">get_cat_tag_content(md_content)</code></div>
<div class="line number45 index44 alt2"><code class="py plain">category </code><code class="py keyword">=</code> <code class="py plain">category_str.split(</code><code class="py string">":"</code><code class="py plain">)[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number46 index45 alt1"><code class="py plain">tags </code><code class="py keyword">=</code> <code class="py plain">tags_str.split(</code><code class="py string">":"</code><code class="py plain">)[</code><code class="py value">1</code><code class="py plain">].split(</code><code class="py string">","</code><code class="py plain">)</code></div>
<div class="line number47 index46 alt2"><code class="py plain">tags.append(category)</code></div>
<div class="line number48 index47 alt1"><code class="py comments"># title 是一個單獨的字串</code></div>
<div class="line number49 index48 alt2"><code class="py plain">title </code><code class="py keyword">=</code> <code class="py plain">title_str.split(</code><code class="py string">":"</code><code class="py plain">)[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number50 index49 alt1"><code class="py comments"># 將 markdown 格式 content 轉為 html</code></div>
<div class="line number51 index50 alt2"><code class="py plain">content </code><code class="py keyword">=</code> <code class="py plain">markdown(content)</code></div>
<div class="line number52 index51 alt1"><code class="py comments"># 以下處理 content 的 &lt;h2&gt; 標題</code></div>
<div class="line number53 index52 alt2"><code class="py plain">content </code><code class="py keyword">=</code> <code class="py plain">content.replace(</code><code class="py string">"&lt;h2&gt;"</code><code class="py plain">, </code><code class="py string">"&lt;h2&gt;&lt;font size='4'&gt;"</code><code class="py plain">)</code></div>
<div class="line number54 index53 alt1"><code class="py plain">content </code><code class="py keyword">=</code> <code class="py plain">content.replace(</code><code class="py string">"&lt;/h2&gt;"</code><code class="py plain">, </code><code class="py string">"&lt;/font&gt;&lt;/h2&gt;"</code><code class="py plain">)</code></div>
<div class="line number55 index54 alt2"><code class="py comments"># g.es(content)</code></div>
<div class="line number56 index55 alt1"> </div>
<div class="line number57 index56 alt2"><code class="py keyword">try</code><code class="py plain">:</code></div>
<div class="line number58 index57 alt1"><code class="py spaces">    </code><code class="py comments">'''</code></div>
<div class="line number59 index58 alt2"><code class="py spaces">    </code><code class="py comments">users = service.users()</code></div>
<div class="line number60 index59 alt1"><code class="py spaces">    </code><code class="py comments"># 取得使用者 profile 資料</code></div>
<div class="line number61 index60 alt2"><code class="py spaces">    </code><code class="py comments">user = users.get(userId='self').execute()</code></div>
<div class="line number62 index61 alt1"><code class="py spaces">    </code><code class="py comments">print('網誌名稱: %s' % user['displayName'])</code></div>
<div class="line number63 index62 alt2"><code class="py spaces">    </code><code class="py comments">'''</code></div>
<div class="line number64 index63 alt1"><code class="py spaces">    </code><code class="py plain">blogs </code><code class="py keyword">=</code> <code class="py plain">service.blogs()</code></div>
<div class="line number65 index64 alt2"><code class="py spaces">    </code><code class="py comments"># 取得使用者所建立網誌名稱</code></div>
<div class="line number66 index65 alt1"><code class="py spaces">    </code><code class="py plain">blogs </code><code class="py keyword">=</code> <code class="py plain">blogs.listByUser(userId</code><code class="py keyword">=</code><code class="py string">'self'</code><code class="py plain">).execute()</code></div>
<div class="line number67 index66 alt2"><code class="py spaces">    </code><code class="py comments"># post_id is now blogs["items"][0]["id"]</code></div>
<div class="line number68 index67 alt1"><code class="py spaces">    </code><code class="py plain">blog_id </code><code class="py keyword">=</code> <code class="py plain">blogs[</code><code class="py string">"items"</code><code class="py plain">][</code><code class="py value">0</code><code class="py plain">][</code><code class="py string">"id"</code><code class="py plain">]</code></div>
<div class="line number69 index68 alt2"><code class="py spaces">    </code><code class="py comments">#for blog in blogs['items']:</code></div>
<div class="line number70 index69 alt1"><code class="py spaces">        </code><code class="py comments">#print(blog['name'], blog['url'])</code></div>
<div class="line number71 index70 alt2"><code class="py spaces">    </code><code class="py plain">posts </code><code class="py keyword">=</code> <code class="py plain">service.posts()</code></div>
<div class="line number72 index71 alt1"><code class="py spaces">    </code><code class="py comments"># 新增網誌 post 時, 需要 post_id</code></div>
<div class="line number73 index72 alt2"><code class="py spaces">    </code><code class="py plain">body </code><code class="py keyword">=</code> <code class="py plain">{</code></div>
<div class="line number74 index73 alt1"><code class="py spaces">    </code><code class="py string">"kind"</code><code class="py plain">: </code><code class="py string">"blogger#post"</code><code class="py plain">,</code></div>
<div class="line number75 index74 alt2"><code class="py spaces">    </code><code class="py string">"id"</code><code class="py plain">: blog_id,</code></div>
<div class="line number76 index75 alt1"><code class="py spaces">    </code><code class="py string">"title"</code><code class="py plain">: title,</code></div>
<div class="line number77 index76 alt2"><code class="py spaces">    </code><code class="py comments"># 利用 markdown 函式, 將 .md 的內文轉為 html, 作為 Blogger 的文章內容</code></div>
<div class="line number78 index77 alt1"><code class="py spaces">    </code><code class="py string">"content"</code><code class="py plain">: content,</code></div>
<div class="line number79 index78 alt2"><code class="py spaces">    </code><code class="py string">"labels"</code><code class="py plain">: tags</code></div>
<div class="line number80 index79 alt1"><code class="py spaces">    </code><code class="py plain">}</code></div>
<div class="line number81 index80 alt2"><code class="py spaces">    </code><code class="py plain">insert </code><code class="py keyword">=</code> <code class="py plain">posts.insert(blogId</code><code class="py keyword">=</code><code class="py plain">blog_id, body</code><code class="py keyword">=</code><code class="py plain">body)</code></div>
<div class="line number82 index81 alt1"><code class="py spaces">    </code><code class="py plain">posts_doc </code><code class="py keyword">=</code> <code class="py plain">insert.execute()</code></div>
<div class="line number83 index82 alt2"><code class="py spaces">    </code><code class="py plain">post_id </code><code class="py keyword">=</code> <code class="py plain">posts_doc[</code><code class="py string">"id"</code><code class="py plain">]</code></div>
<div class="line number84 index83 alt1"><code class="py spaces">    </code><code class="py comments">#print(posts_doc)</code></div>
<div class="line number85 index84 alt2"><code class="py spaces">    </code><code class="py comments"># 改用 credential token 後不會產生 blogger.dat</code></div>
<div class="line number86 index85 alt1"><code class="py spaces">    </code><code class="py comments">#os.remove("blogger.dat")</code></div>
<div class="line number87 index86 alt2"><code class="py spaces">    </code><code class="py comments"># 利用最後的 child 節點來儲存 post_id</code></div>
<div class="line number88 index87 alt1"><code class="py spaces">    </code><code class="py plain">to_save_post_id </code><code class="py keyword">=</code> <code class="py plain">p.insertAsLastChild()   </code></div>
<div class="line number89 index88 alt2"><code class="py spaces">    </code><code class="py comments"># 改為內文為空的節點, id 直接標在 head 標題 </code></div>
<div class="line number90 index89 alt1"><code class="py spaces">    </code><code class="py plain">to_save_post_id.b </code><code class="py keyword">=</code> <code class="py plain">""</code></div>
<div class="line number91 index90 alt2"><code class="py spaces">    </code><code class="py plain">to_save_post_id.h </code><code class="py keyword">=</code> <code class="py plain">post_id</code></div>
<div class="line number92 index91 alt1"><code class="py spaces">    </code><code class="py comments"># 因為新增節點, commander 必須 redraw</code></div>
<div class="line number93 index92 alt2"><code class="py spaces">    </code><code class="py plain">c.redraw()</code></div>
<div class="line number94 index93 alt1"><code class="py spaces">    </code><code class="py plain">g.es(</code><code class="py string">"post_id 為"</code><code class="py plain">, post_id)</code></div>
<div class="line number95 index94 alt2"><code class="py spaces">    </code><code class="py plain">g.es(</code><code class="py string">"已經將資料送往 Blogger!"</code><code class="py plain">)</code></div>
<div class="line number96 index95 alt1"><code class="py keyword">except</code><code class="py plain">(client.AccessTokenRefreshError):</code></div>
<div class="line number97 index96 alt2"><code class="py spaces">    </code><code class="py plain">g.es(</code><code class="py string">"error"</code><code class="py plain">)</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>edit_to_blogger 按鈕內容:</p>
<div>
<div class="syntaxhighlighter py" id="highlighter_892831">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
<div class="line number31 index30 alt2">31</div>
<div class="line number32 index31 alt1">32</div>
<div class="line number33 index32 alt2">33</div>
<div class="line number34 index33 alt1">34</div>
<div class="line number35 index34 alt2">35</div>
<div class="line number36 index35 alt1">36</div>
<div class="line number37 index36 alt2">37</div>
<div class="line number38 index37 alt1">38</div>
<div class="line number39 index38 alt2">39</div>
<div class="line number40 index39 alt1">40</div>
<div class="line number41 index40 alt2">41</div>
<div class="line number42 index41 alt1">42</div>
<div class="line number43 index42 alt2">43</div>
<div class="line number44 index43 alt1">44</div>
<div class="line number45 index44 alt2">45</div>
<div class="line number46 index45 alt1">46</div>
<div class="line number47 index46 alt2">47</div>
<div class="line number48 index47 alt1">48</div>
<div class="line number49 index48 alt2">49</div>
<div class="line number50 index49 alt1">50</div>
<div class="line number51 index50 alt2">51</div>
<div class="line number52 index51 alt1">52</div>
<div class="line number53 index52 alt2">53</div>
<div class="line number54 index53 alt1">54</div>
<div class="line number55 index54 alt2">55</div>
<div class="line number56 index55 alt1">56</div>
<div class="line number57 index56 alt2">57</div>
<div class="line number58 index57 alt1">58</div>
<div class="line number59 index58 alt2">59</div>
<div class="line number60 index59 alt1">60</div>
<div class="line number61 index60 alt2">61</div>
<div class="line number62 index61 alt1">62</div>
<div class="line number63 index62 alt2">63</div>
<div class="line number64 index63 alt1">64</div>
<div class="line number65 index64 alt2">65</div>
<div class="line number66 index65 alt1">66</div>
<div class="line number67 index66 alt2">67</div>
<div class="line number68 index67 alt1">68</div>
<div class="line number69 index68 alt2">69</div>
<div class="line number70 index69 alt1">70</div>
<div class="line number71 index70 alt2">71</div>
<div class="line number72 index71 alt1">72</div>
<div class="line number73 index72 alt2">73</div>
<div class="line number74 index73 alt1">74</div>
<div class="line number75 index74 alt2">75</div>
<div class="line number76 index75 alt1">76</div>
<div class="line number77 index76 alt2">77</div>
<div class="line number78 index77 alt1">78</div>
<div class="line number79 index78 alt2">79</div>
<div class="line number80 index79 alt1">80</div>
<div class="line number81 index80 alt2">81</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py decorator">@language</code> <code class="py plain">python</code></div>
<div class="line number2 index1 alt1"><code class="py keyword">from</code> <code class="py plain">markdown </code><code class="py keyword">import</code> <code class="py plain">markdown</code></div>
<div class="line number3 index2 alt2"><code class="py keyword">from</code> <code class="py plain">oauth2client </code><code class="py keyword">import</code> <code class="py plain">client</code></div>
<div class="line number4 index3 alt1"><code class="py comments">#from googleapiclient import sample_tools</code></div>
<div class="line number5 index4 alt2"><code class="py keyword">import</code> <code class="py plain">os</code></div>
<div class="line number6 index5 alt1"><code class="py comments"># 配合使用 credential token</code></div>
<div class="line number7 index6 alt2"><code class="py keyword">import</code> <code class="py plain">pickle</code></div>
<div class="line number8 index7 alt1"><code class="py keyword">from</code> <code class="py plain">googleapiclient.discovery </code><code class="py keyword">import</code> <code class="py plain">build</code></div>
<div class="line number9 index8 alt2"><code class="py comments">#from google_auth_oauthlib.flow import InstalledAppFlow</code></div>
<div class="line number10 index9 alt1"><code class="py comments">#from google.auth.transport.requests import Request</code></div>
<div class="line number11 index10 alt2"> </div>
<div class="line number12 index11 alt1"><code class="py plain">os.environ[</code><code class="py string">'TZ'</code><code class="py plain">] </code><code class="py keyword">=</code> <code class="py string">'Asia/Taipei'</code></div>
<div class="line number13 index12 alt2"><code class="py plain">with </code><code class="py functions">open</code><code class="py plain">(</code><code class="py string">'./../../blogger_credentials.dat'</code><code class="py plain">, </code><code class="py string">'rb'</code><code class="py plain">) as credentials_dat:</code></div>
<div class="line number14 index13 alt1"><code class="py spaces">    </code><code class="py plain">credentials </code><code class="py keyword">=</code> <code class="py plain">pickle.load(credentials_dat)</code></div>
<div class="line number15 index14 alt2"><code class="py plain">service </code><code class="py keyword">=</code> <code class="py plain">build(</code><code class="py string">'blogger'</code><code class="py plain">, </code><code class="py string">'v3'</code><code class="py plain">, credentials</code><code class="py keyword">=</code><code class="py plain">credentials)</code></div>
<div class="line number16 index15 alt1"> </div>
<div class="line number17 index16 alt2"><code class="py keyword">def</code> <code class="py plain">get_cat_tag_content(data):</code></div>
<div class="line number18 index17 alt1"><code class="py spaces">    </code><code class="py comments"># 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---</code></div>
<div class="line number19 index18 alt2"><code class="py spaces">    </code><code class="py comments"># 用跳行符號分割</code></div>
<div class="line number20 index19 alt1"><code class="py spaces">    </code><code class="py plain">data_list </code><code class="py keyword">=</code> <code class="py plain">data.split(</code><code class="py string">"\n"</code><code class="py plain">)</code></div>
<div class="line number21 index20 alt2"><code class="py spaces">    </code><code class="py comments">#第 2 行為 title</code></div>
<div class="line number22 index21 alt1"><code class="py spaces">    </code><code class="py plain">title</code><code class="py keyword">=</code> <code class="py plain">data_list[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number23 index22 alt2"><code class="py spaces">    </code><code class="py comments">#第 4 行為 category</code></div>
<div class="line number24 index23 alt1"><code class="py spaces">    </code><code class="py plain">category </code><code class="py keyword">=</code> <code class="py plain">data_list[</code><code class="py value">3</code><code class="py plain">]</code></div>
<div class="line number25 index24 alt2"><code class="py spaces">    </code><code class="py comments">#第 5 行為 tags</code></div>
<div class="line number26 index25 alt1"><code class="py spaces">    </code><code class="py plain">tags </code><code class="py keyword">=</code> <code class="py plain">data_list[</code><code class="py value">4</code><code class="py plain">]</code></div>
<div class="line number27 index26 alt2"><code class="py spaces">    </code><code class="py comments"># 有多項資料的 content 型別為數列</code></div>
<div class="line number28 index27 alt1"><code class="py spaces">    </code><code class="py comments"># 再將第 9 行之後的資料數列串回成以跳行隔開的資料</code></div>
<div class="line number29 index28 alt2"><code class="py spaces">    </code><code class="py plain">content </code><code class="py keyword">=</code> <code class="py string">"\n"</code><code class="py plain">.join(data_list[</code><code class="py value">8</code><code class="py plain">:])</code></div>
<div class="line number30 index29 alt1"><code class="py spaces">    </code><code class="py comments"># 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;</code></div>
<div class="line number31 index30 alt2"><code class="py spaces">    </code><code class="py plain">content </code><code class="py keyword">=</code> <code class="py plain">content.replace(</code><code class="py string">'&lt;!-- PELICAN_END_SUMMARY --&gt;'</code><code class="py plain">, </code><code class="py string">'&lt;!--more--&gt;'</code><code class="py plain">)</code></div>
<div class="line number32 index31 alt1"><code class="py spaces">    </code><code class="py comments"># 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式</code></div>
<div class="line number33 index32 alt2"><code class="py spaces">    </code><code class="py comments">#content = content.replace('~~~python', '[code lang="python"]')</code></div>
<div class="line number34 index33 alt1"><code class="py spaces">    </code><code class="py comments">#content = content.replace('~~~', '[/code]')</code></div>
<div class="line number35 index34 alt2"><code class="py spaces">    </code><code class="py keyword">return</code> <code class="py plain">title, category, tags, content</code></div>
<div class="line number36 index35 alt1"> </div>
<div class="line number37 index36 alt2"><code class="py comments"># 從目前所在節點的 body pan 中取出類別, tags 以及文章內容</code></div>
<div class="line number38 index37 alt1"><code class="py comments"># p.h 為 @clean filename.md</code></div>
<div class="line number39 index38 alt2"><code class="py comments"># 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案</code></div>
<div class="line number40 index39 alt1"><code class="py plain">md_filename </code><code class="py keyword">=</code> <code class="py plain">p.h.split(</code><code class="py string">" "</code><code class="py plain">)[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number41 index40 alt2"><code class="py plain">with </code><code class="py functions">open</code><code class="py plain">(md_filename, </code><code class="py string">'r'</code><code class="py plain">, encoding</code><code class="py keyword">=</code><code class="py string">"utf-8"</code><code class="py plain">) as content_file:</code></div>
<div class="line number42 index41 alt1"><code class="py spaces">    </code><code class="py plain">md_content </code><code class="py keyword">=</code> <code class="py plain">content_file.read()</code></div>
<div class="line number43 index42 alt2"><code class="py comments"># title_str, category_str, tags_str, content = get_cat_tag_content(p.b)</code></div>
<div class="line number44 index43 alt1"><code class="py plain">title_str, category_str, tags_str, content </code><code class="py keyword">=</code> <code class="py plain">get_cat_tag_content(md_content)</code></div>
<div class="line number45 index44 alt2"><code class="py plain">category </code><code class="py keyword">=</code> <code class="py plain">category_str.split(</code><code class="py string">":"</code><code class="py plain">)[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number46 index45 alt1"><code class="py plain">tags </code><code class="py keyword">=</code> <code class="py plain">tags_str.split(</code><code class="py string">":"</code><code class="py plain">)[</code><code class="py value">1</code><code class="py plain">].split(</code><code class="py string">","</code><code class="py plain">)</code></div>
<div class="line number47 index46 alt2"><code class="py plain">tags.append(category)</code></div>
<div class="line number48 index47 alt1"><code class="py comments"># title 是一個單獨的字串</code></div>
<div class="line number49 index48 alt2"><code class="py plain">title </code><code class="py keyword">=</code> <code class="py plain">title_str.split(</code><code class="py string">":"</code><code class="py plain">)[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number50 index49 alt1"><code class="py comments"># 將 markdown 格式 content 轉為 html</code></div>
<div class="line number51 index50 alt2"><code class="py plain">content </code><code class="py keyword">=</code> <code class="py plain">markdown(content)</code></div>
<div class="line number52 index51 alt1"><code class="py comments"># 以下處理 content 的 &lt;h2&gt; 標題</code></div>
<div class="line number53 index52 alt2"><code class="py plain">content </code><code class="py keyword">=</code> <code class="py plain">content.replace(</code><code class="py string">"&lt;h2&gt;"</code><code class="py plain">, </code><code class="py string">"&lt;h2&gt;&lt;font size='4'&gt;"</code><code class="py plain">)</code></div>
<div class="line number54 index53 alt1"><code class="py plain">content </code><code class="py keyword">=</code> <code class="py plain">content.replace(</code><code class="py string">"&lt;/h2&gt;"</code><code class="py plain">, </code><code class="py string">"&lt;/font&gt;&lt;/h2&gt;"</code><code class="py plain">)</code></div>
<div class="line number55 index54 alt2"><code class="py comments"># g.es(content)</code></div>
<div class="line number56 index55 alt1"> </div>
<div class="line number57 index56 alt2"><code class="py keyword">try</code><code class="py plain">:</code></div>
<div class="line number58 index57 alt1"><code class="py spaces">    </code><code class="py plain">blogs </code><code class="py keyword">=</code> <code class="py plain">service.blogs()</code></div>
<div class="line number59 index58 alt2"><code class="py spaces">    </code><code class="py comments"># 取得使用者所建立網誌名稱</code></div>
<div class="line number60 index59 alt1"><code class="py spaces">    </code><code class="py plain">blogs </code><code class="py keyword">=</code> <code class="py plain">blogs.listByUser(userId</code><code class="py keyword">=</code><code class="py string">'self'</code><code class="py plain">).execute()</code></div>
<div class="line number61 index60 alt2"><code class="py spaces">    </code><code class="py plain">blog_id </code><code class="py keyword">=</code> <code class="py plain">blogs[</code><code class="py string">"items"</code><code class="py plain">][</code><code class="py value">0</code><code class="py plain">][</code><code class="py string">"id"</code><code class="py plain">]</code></div>
<div class="line number62 index61 alt1"><code class="py spaces">    </code><code class="py comments"># 設法取得原 post 的 id</code></div>
<div class="line number63 index62 alt2"><code class="py spaces">    </code><code class="py plain">postid_outline </code><code class="py keyword">=</code> <code class="py plain">p.getLastChild()</code></div>
<div class="line number64 index63 alt1"><code class="py spaces">    </code><code class="py comments"># 直接從標題取得 post 的 id 號碼</code></div>
<div class="line number65 index64 alt2"><code class="py spaces">    </code><code class="py plain">post_id </code><code class="py keyword">=</code> <code class="py plain">postid_outline.h</code></div>
<div class="line number66 index65 alt1"><code class="py spaces">    </code><code class="py plain">posts </code><code class="py keyword">=</code> <code class="py plain">service.posts()</code></div>
<div class="line number67 index66 alt2"><code class="py spaces">    </code><code class="py comments"># 更新網誌文章時的 body</code></div>
<div class="line number68 index67 alt1"><code class="py spaces">    </code><code class="py plain">body </code><code class="py keyword">=</code> <code class="py plain">{</code></div>
<div class="line number69 index68 alt2"><code class="py spaces">    </code><code class="py string">"kind"</code><code class="py plain">: </code><code class="py string">"blogger#post"</code><code class="py plain">,</code></div>
<div class="line number70 index69 alt1"><code class="py spaces">    </code><code class="py string">"title"</code><code class="py plain">: title,</code></div>
<div class="line number71 index70 alt2"><code class="py spaces">    </code><code class="py string">"content"</code><code class="py plain">: content</code></div>
<div class="line number72 index71 alt1"><code class="py spaces">    </code><code class="py plain">}</code></div>
<div class="line number73 index72 alt2"><code class="py spaces">    </code><code class="py comments"># need to save postId to outline head</code></div>
<div class="line number74 index73 alt1"><code class="py spaces">    </code><code class="py plain">update </code><code class="py keyword">=</code> <code class="py plain">posts.update(blogId</code><code class="py keyword">=</code><code class="py plain">blog_id, postId</code><code class="py keyword">=</code><code class="py plain">post_id, body</code><code class="py keyword">=</code><code class="py plain">body, publish</code><code class="py keyword">=</code><code class="py color1">True</code><code class="py plain">)</code></div>
<div class="line number75 index74 alt2"><code class="py spaces">    </code><code class="py plain">update_doc </code><code class="py keyword">=</code> <code class="py plain">update.execute()</code></div>
<div class="line number76 index75 alt1"><code class="py spaces">    </code><code class="py comments"># 使用 credential token 後, 無需刪除 blogger.dat</code></div>
<div class="line number77 index76 alt2"><code class="py spaces">    </code><code class="py comments">#os.remove("blogger.dat")</code></div>
<div class="line number78 index77 alt1"><code class="py spaces">    </code><code class="py plain">g.es(</code><code class="py string">"post_id 為"</code><code class="py plain">, post_id)</code></div>
<div class="line number79 index78 alt2"><code class="py spaces">    </code><code class="py plain">g.es(</code><code class="py string">"已經將更新資料送往 Blogger!"</code><code class="py plain">)</code></div>
<div class="line number80 index79 alt1"><code class="py keyword">except</code><code class="py plain">(client.AccessTokenRefreshError):</code></div>
<div class="line number81 index80 alt2"><code class="py spaces">    </code><code class="py plain">g.es(</code><code class="py string">"error"</code><code class="py plain">)</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<h1>W14</h1>
<p>直接在操作系統建立網際內容管理合用系統</p>
<p>Windows 10 64 位元操作系統</p>
<p>安裝 Python 3.8.3 與 pip</p>
<p>至 <a href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/</a> </p>
<p>下載 Python 3.8.3<span> </span><a href="https://www.python.org/ftp/python/3.8.3/python-3.8.3-amd64.exe">Windows x86-64 executable installer</a></p>
<p>可以直接選擇安裝 pip 與所有選項內容</p>
<p>安裝 Git</p>
<p>利用 <a href="https://github.com/git-for-windows/git/releases/download/v2.26.2.windows.1/Git-2.26.2-64-bit.exe">64-bit Git for Windows Setup</a> 安裝 Git 工具.</p>
<p>安裝 CMSiMDE 所需模組</p>
<p>利用 cmd 開啟命令列視窗, 以 pip 安裝 flask flask_cors lxml bs4 markdown pelican leo 等模組</p>
<p>pip install <span> flask flask_cors lxml bs4 markdown pelican leo</span></p>
<p>Ubuntu 20.04 操作系統 (請下載<a href="https://drive.google.com/open?id=13Gqwyj0CGR6wa9dZg_BmlCLv5cNYWQJ_"><span> </span>W12 Virtualbox 虛擬主機檔案</a>)</p>
<p>Ubuntu 20.04 同時存在 Python 2.7 與 Python 3.8.2,  CMSiMDE 只相容於 Python 3.8.2, 因此啟動指令必須使用:</p>
<p>python3 wsgi.py</p>
<p>與 </p>
<p>pip3 install <span> flask flask_cors lxml bs4 markdown pelican leo</span></p>
<p>Mac OS X 操作系統</p>
<p>與 Ubuntu 20.04 類似。</p>
<p></p>
<p></p>
<p></p>